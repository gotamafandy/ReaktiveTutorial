apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.squareup.sqldelight'

apply from: 'android.gradle'

group = 'com.adrena.reaktive.core'
version = 1.0

kotlin {
    android()

    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'iOS') {
            binaries {
                framework('Core')
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:$serialization_version"

                // Cache
                implementation "com.squareup.sqldelight:runtime:$sqldelight_version"

                // Coroutines
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

                // HTTP
                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-json:$ktor_version"
                implementation "io.ktor:ktor-client-logging:$ktor_version"
                implementation "io.ktor:ktor-client-serialization:$ktor_version"

                // Reactive
                implementation "com.badoo.reaktive:reaktive:$reactive_version"
                implementation "com.badoo.reaktive:coroutines-interop:$reactive_version-nmtc"

                // Logging
                implementation "io.github.aakira:napier:$napier_version"
            }
        }

        iOSMain {
            dependencies {
                // Cache
                implementation "com.squareup.sqldelight:native-driver:$sqldelight_version"

                // HTTP
                implementation "io.ktor:ktor-client-ios:$ktor_version"
            }
        }

        all {
            languageSettings {
                progressiveMode = true
                useExperimentalAnnotation('kotlin.Experimental')
            }
        }
    }
}

sqldelight {
    MoviesDatabase {
        packageName = "com.adrena.core.sql"
        sourceFolders = ["sqldelight"]
        schemaOutputDirectory = file("src/commonMain/sqldelight/databases")
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

// Xcode-specific
task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.iOS.binaries.getFramework("Core", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode
dependencies {
}